/**************************/
#include "beestackconfiguration.h"

/*========================================== RESPONSES ==========================================*/

/*==============================================================================================
	=============== 2.4.4.1 Device and Service Discovery Server Service Primitives ===============
	==============================================================================================*/
#if gNWK_addr_rsp_d
/*-------------------- NWK_addr_rsp --------------------
	2.4.4.1.1 NWK_addr_rsp. (ClusterID=0x8000)

	The NWK_addr_rsp is generated from a Remote Device receiving a broadcast
	NWK_addr_req who detect a match of the IEEEAddr parameter with their own
	IEEE address or the IEEE address held in a local discovery cache. The destination
	addressing on this command is unicast.

	IN: The package with the request information.
	IN/OUT: The buffer where the response data will be filled in.
	IN: The Id of the request coming in.

	OUT: The size in bytes of the response payload.
*/
#define NWK_addr_rsp(pMessageComingIn, pMessageGoingOut, clusterId)  NWK_addr_And_IEEE_addr_rsp((uint8_t *)pMessageComingIn, (zbAddressResponse_t *)pMessageGoingOut, clusterId)
#else
#define NWK_addr_rsp(pMessageComingIn, pMessageGoingOut, clusterId)  gZero_c
#endif

#if gIEEE_addr_rsp_d
/*-------------------- IEEE_addr_rsp --------------------
	2.4.4.1.2 IEEE_addr_rsp. (ClusterID=0x8001)

	The IEEE_addr_rsp is generated from Remote Devices in response to the unicast
	IEEE_addr_req inquiring as to the 64 bit IEEE address of the Remote Device. The
	destination addressing on this command shall be unicast.

	IN: The package with the request information.
	IN/OUT: The buffer where the response data will be filled in.
	IN: The Id of the request coming in.

	OUT: The size in bytes of the response payload.
*/
#define IEEE_addr_rsp(pMessageComingIn, pMessageGoingOut, clusterId)  NWK_addr_And_IEEE_addr_rsp((uint8_t *)pMessageComingIn, (zbAddressResponse_t *)pMessageGoingOut, clusterId)
#else
#define IEEE_addr_rsp(pMessageComingIn, pMessageGoingOut, clusterId)  gZero_c
#endif

#if gNode_Desc_rsp_d
/*-------------------- Node_Desc_rsp --------------------
	2.4.4.1.3 Node_Desc_rsp. (ClusterID=0x8002)

	The Node_Desc_rsp is generated by a remote device in response to a
	Node_Desc_req directed to the remote device. This command shall be unicast to
	the originator of the Node_Desc_req command.

	IN: The package with the request information.
	IN/OUT: The buffer where the response data will be filled in.
	IN: The Id of the request coming in.

	OUT: The size in bytes of the response payload.
*/
#define Node_Desc_rsp(pMessageComingIn, pMessageGoingOut, clusterId)  Node_Desc_Power_Desc_And_User_Desc_rsp((uint8_t *)pMessageComingIn, (uint8_t *)pMessageGoingOut,clusterId)
#else
#define Node_Desc_rsp(pMessageComingIn, pMessageGoingOut, clusterId)  gZero_c
#endif

#if gPower_Desc_rsp_d
/*-------------------- Power_Desc_rsp --------------------
	2.4.4.1.4 Power_Desc_rsp. (ClusterID=0x8003)

	The Power_Desc_rsp is generated by a remote device in response to a
	Power_Desc_req directed to the remote device. This command shall be unicast to
	the originator of the Power_Desc_req command.

	IN: The package with the request information.
	IN/OUT: The buffer where the response data will be filled in.
	IN: The Id of the request coming in.

	OUT: The size in bytes of the response payload.
*/
#define Power_Desc_rsp(pMessageComingIn, pMessageGoingOut, clusterId)  Node_Desc_Power_Desc_And_User_Desc_rsp((uint8_t *)pMessageComingIn, (uint8_t *)pMessageGoingOut, clusterId)
#else
#define Power_Desc_rsp(pMessageComingIn, pMessageGoingOut, clusterId)  gZero_c
#endif

#if gSimple_Desc_rsp_d
/*-------------------- Simple_Desc_rsp --------------------
	2.4.4.1.5 Simple_Desc_rsp. (ClusterID=0x8004)

	The Simple_Desc_rsp is generated by a remote device in response to a
	Simple_Desc_req directed to the remote device. This command shall be unicast to
	the originator of the Simple_Desc_req command.

	IN: The package with the request information.
	IN/OUT: The buffer where the response data will be filled in.

	OUT: The size in bytes of the response payload.
*/
zbSize_t Simple_Desc_rsp
(
	zbSimpleDescriptorRequest_t  *pMessageComingIn,  /* IN: The package with the request information. */
	zbSimpleDescriptorResponse_t  *pMessageGoingOut  /* IN/OUT: The buffer where the response data will be filled in. */
);
#else
#define Simple_Desc_rsp(pMessageComingIn, pMessageGoingOut)  gZero_c
#endif

#if gExtended_Simple_Desc_rsp_d
	/*-------------------- Extended_Simple_Desc_rsp --------------------
		2.4.4.1.20 Extended_Simple_Desc_rsp. (ClusterID=0x801D)

	The Extended_Simple_Desc_rsp is generated by a remote device in response to an
  Extended_Simple_Desc_req directed to the remote device. This command shall
  be unicast to the originator of the Extended_Simple_Desc_req command.

	IN: The package with the request information.
	IN/OUT: The buffer where the response data will be filled in.

	OUT: The size in bytes of the request payload.
*/
zbSize_t Extended_Simple_Desc_rsp
(
	zbExtSimpleDescriptorRequest_t  *pMessageComingIn,  /* IN: The package with the request information. */
	zbExtSimpleDescriptorResponse_t  *pMessageGoingOut  /* IN/OUT: The buffer where the response data will be filled in. */
);
#else
#define Extended_Simple_Desc_rsp(pMessageComingIn, pMessageGoingOut)  gZero_c
#endif

#if gActive_EP_rsp_d
/*-------------------- Active_EP_rsp --------------------
	2.4.4.1.6 Active_EP_rsp. (ClusterID=0x8005)

	The Active_EP_rsp is generated by a remote device in response to an
	Active_EP_req directed to the remote device. This command shall be unicast to
	the originator of the Active_EP_req command.

	IN/OUT: The buffer where the response data will be filled in.
	IN: The address comingin the request package.

	OUT: The size in bytes of the response payload.
*/
zbSize_t Active_EP_rsp
(
	zbActiveEpResponse_t *pMessageGoingOut,  /* IN/OUT: The buffer where the response data will be filled in. */
	zbNwkAddr_t  aNwkAddress                 /* IN: The address comingin the request package. */
);
#else
#define Active_EP_rsp(pMessageGoingOut, aNwkAddress)  gZero_c
#endif

#if gExtended_Active_EP_rsp_d
/*-------------------- Extended_Active_EP_rsp --------------------
  2.4.4.1.21 Extended_Active_EP_rsp. (ClusterID=0x801E)

	The Extended_Active_EP_rsp is generated by a remote device in response to an
  Extended_Active_EP_req directed to the remote device. This command shall be
  unicast to the originator of the Extended_Active_EP_req command.
	

	IN/OUT: The buffer where the response data will be filled in.
	IN: The address comingin the request package.

	OUT: The size in bytes of the request payload.
*/
zbSize_t Extended_Active_EP_rsp
(
	zbExtActiveEpResponse_t *pMessageGoingOut,  /* IN/OUT: The buffer where the response data will be filled in. */
	zbNwkAddr_t  aNwkAddress,                 /* IN: The address comingin the request package. */
  zbIndex_t startIndex
);
#else
#define Extended_Active_EP_rsp(pMessageGoingOut, aNwkAddress, startIndex)  gZero_c
#endif

#if gMatch_Desc_rsp_d
/*-------------------- Match_Desc_rsp --------------------
	2.4.4.1.7 Match_Desc_rsp. (ClusterID=0x8006)

	The Match_Desc_rsp is generated by a remote device in response to a
	Match_Desc_req either broadcast or directed to the remote device. This command
	shall be unicast to the originator of the Match_Desc_req command.

	IN: The package with the request information.
	IN/OUT: The buffer where the response data will be filled in.

	OUT: The size in bytes of the response payload.
*/
zbSize_t Match_Desc_rsp
(
	zbMatchDescriptorRequest_t *pMessageComingIn,  /* IN: The package with the request information. */
	zbMatchDescriptorResponse_t *pMessageGoingOut  /* IN/OUT: The buffer where the response data will be filled in. */
);
#endif

#if gComplex_Desc_rsp_d
/*-------------------- Complex_Desc_rsp --------------------
	2.4.4.1.8 Complex_Desc_rsp. (ClusterID=0x8010)

	The Complex_Desc_rsp is generated by a remote device in response to a
	Complex_Desc_req directed to the remote device. This command shall be unicast
	to the originator of the Complex_Desc_req command.

	IN: The package with the request information.
	IN/OUT: The buffer where the response data will be filled in.

	OUT: The size in bytes of the response payload.
*/
zbSize_t Complex_Desc_rsp
(
	zbComplexDescriptorRequest_t *pMessageComingIn,  /* IN: The package with the request information. */
	zbComplexDescriptorResponse_t *pMessageGoingOut  /* IN/OUT: The buffer where the response data will be filled in. */
);
#else
#define Complex_Desc_rsp(pMessageComingIn,pMessageGoingOut)  gZero_c
#endif

#if gUser_Desc_rsp_d
/*-------------------- User_Desc_rsp --------------------
	2.4.4.1.9 User_Desc_rsp. (ClusterID=0x8011)

	The User_Desc_rsp is generated by a remote device in response to a
	User_Desc_req directed to the remote device. This command shall be unicast to
	the originator of the User_Desc_req command.

	OUT: The size in bytes of the response payload.
*/
#define User_Desc_rsp(pMessageComingIn, pMessageGoingOut, clusterId)  Node_Desc_Power_Desc_And_User_Desc_rsp((uint8_t *)pMessageComingIn, (uint8_t *)pMessageGoingOut, clusterId)
#else
#define User_Desc_rsp(pMessageComingIn, pMessageGoingOut, clusterId)  gZero_c
#endif

#if gSystem_Server_Discovery_rsp_d
/*-------------------- System_Server_Discovery_rsp --------------------
	2.4.4.1.10 System_Server_Discovery_rsp. (ClusterID=0x8015)

	The System_Server_Discovery_rsp is generated from Remote Devices on receipt
	of a System_Server_Discovery_req primitive if the parameter matches the Server
	Mask field in its node descriptor. (If there is no match, the
	System_Server_Discovery_req shall be ignored and no response given). Matching
	is performed by masking the ServerMask parameter of the
	System_Server_Discovery_req with the Server Mask field in the node descriptor.
	This command shall be unicast to the device which sent
	System_Server_Discovery_req with Acknowledge request set in TxOptions. The
	parameter ServerMask contains the bits in the parameter of the request which
	match the server mask in the node descriptor.

	IN/OUT: The buffer where the response data will be filled in.
	IN The service mask to match.

	OUT: The size in bytes of the response payload.
*/
zbSize_t System_Server_Discovery_rsp
(
	zbSystemServerDiscoveryResponse_t  *pMessageGoingOut,  /* IN/OUT: The buffer where the response data will be filled in. */
	zbServerMask_t  aServerMask                            /* IN The service mask to match. */
);
#else
#define System_Server_Discovery_rsp(pMessageGoingOut, aServerMask)  gZero_c
#endif

#if gUser_Desc_conf_d
/*-------------------- User_Desc_conf --------------------
	2.4.4.1.11 User_Desc_conf. (ClusterID=0x8014)

	The User_Desc_conf is generated by a remote device in response to a
	User_Desc_set directed to the remote device. This command shall be unicast to
	the originator of the User_Desc_set command.

	IN: The package with the request information.
	IN/OUT: The buffer where the response data will be filled in.

	OUT: The size in bytes of the response payload.
*/
zbSize_t User_Desc_conf
(
	zbUserDescriptorSet_t  *pMessageComingIn,     /* IN: The package with the request information. */
	zbUserDescriptorConfirm_t  *pMessageGoingOut  /* IN/OUT: The buffer where the response data will be filled in. */
);
#else
#define User_Desc_conf(pMessageComingIn, pMessageGoingOut)  gZero_c
#endif

#if gDiscovery_Cache_rsp_d
/*-------------------- Discovery_Cache_rsp --------------------
	2.4.4.1.12 Discovery_Cache_rsp. (ClusterID=0x8012)

	The Discovery_Cache_rsp is generated by Primary Discovery Cache devices
	receiving the Discovery_Cache_req. Remote Devices which are not Primary
	Discovery Cache devices (as designated in its Node Descriptor) should not
	respond to the Discovery_Cache_req command.

	IN/OUT: NONE.

	OUT: The size in bytes of the response payload.
*/
zbSize_t Discovery_Cache_rsp
(
	void  /* IN/OUT: NONE. */
);
#else
#define Discovery_Cache_rsp()  gZero_c
#endif

#if gDiscovery_store_rsp_d
/*-------------------- Discovery_store_rsp --------------------
	2.4.4.1.13 Discovery_store_rsp. (ClusterID=0x8016)

	The Discovery_store_rsp is provided to notify a Local Device of the request status
	from a Primary Discovery Cache device. Included in the response is a status code
	to notify the Local Device whether the request is successful (the Primary Cache
	Device has space to store the discovery cache data for the Local Device), whether
	the request is unsupported (meaning the Remote Device is not a Primary
	Discovery Cache device) or whether insufficient space exists.

	IN/OUT: The buffer where the response data will be filled in.
	IN: The short address of the requesting device.
	IN: The MAC address of the requesting device.

	OUT: The size in bytes of the response payload.
*/
zbSize_t Discovery_store_rsp
(
	zbDiscoveryStoreResponse_t  *pMessageGoingOut,  /* IN/OUT: The buffer where the response data will be filled in. */
	zbNwkAddr_t  aNwkAddress,                       /* IN: The short address of the requesting device. */
	zbIeeeAddr_t  aIeeeAddress                      /* IN: The MAC address of the requesting device. */
);
#else
#define Discovery_store_rsp(pMessageGoingOut, aNwkAddress, aIeeeAddress)  gZero_c
#endif

#if gNode_Desc_store_rsp_d
/*-------------------- Node_Desc_store_rsp --------------------
	2.4.4.1.14 Node_Desc_store_rsp. (ClusterID=0x8017)

	The Node_store_rsp is provided to notify a Local Device of the request status
	from a Primary Discovery Cache device. Included in the response is a status code
	to notify the Local Device whether the request is successful (the Primary Cache
	Device has space to store the discovery cache data for the Local Device), whether
	the request is not supported (meaning the Remote Device is not a Primary
	Discovery Cache device) or whether insufficient space exists.

	IN/OUT: The buffer where the response data will be filled in.
	IN: The size in bytes of the descriptor to store.
	IN: The descriptor to store.
	IN: The short address of the requesting device.

	OUT: The size in bytes of the response payload.
*/
#define Node_Desc_store_rsp(pMessageGoingOut, count, pDataToStore, aNwkAddress)  Descriptor_Store_rsp(gNode_Desc_store_req_c, pMessageGoingOut,count, pDataToStore, aNwkAddress)
#else
#define Node_Desc_store_rsp(pMessageGoingOut, count, pDataToStore, aNwkAddress)  gZero_c
#endif

#if gPower_Desc_store_rsp_d
/*-------------------- Power_Desc_store_rsp --------------------
	2.4.4.1.15 Power_Desc_store_rsp. (ClusterID=0x8018)

	The Power_Desc_store_rsp is provided to notify a Local Device of the request
	status from a Primary Discovery Cache device. Included in the response is a status
	code to notify the Local Device whether the request is successful (the Primary
	Cache Device has space to store the discovery cache data for the Local Device),
	whether the request is not supported (meaning the Remote Device is not a Primary
	Discovery Cache device) or whether insufficient space exists.

	IN/OUT: The buffer where the response data will be filled in.
	IN: The size in bytes of the descriptor to store.
	IN: The descriptor to store.
	IN: The short address of the requesting device.

	OUT: The size in bytes of the response payload.
*/
#define Power_Desc_store_rsp(pMessageGoingOut, count, pDataToStore, aNwkAddress)  Descriptor_Store_rsp(gPower_Desc_store_req_c, pMessageGoingOut,count, pDataToStore, aNwkAddress)
#else
#define Power_Desc_store_rsp(pMessageGoingOut, count, pDataToStore, aNwkAddress)  gZero_c
#endif

#if gActive_EP_store_rsp_d
/*-------------------- Active_EP_store_rsp --------------------
	2.4.4.1.16 Active_EP_store_rsp. (ClusterID=0x8019)

	The Active_EP_store_rsp is provided to notify a Local Device of the request
	status from a Primary Discovery Cache device. Included in the response is a status
	code to notify the Local Device whether the request is successful (the Primary
	Cache Device has space to store the discovery cache data for the Local Device),
	whether the request is not supported (meaning the Remote Device is not a Primary
	Discovery Cache device) or whether insufficient space exists.

	IN/OUT: The buffer where the response data will be filled in.
	IN: The size in bytes of the descriptor to store.
	IN: The descriptor to store.
	IN: The short address of the requesting device.

	OUT: The size in bytes of the response payload.
*/
#define Active_EP_store_rsp(pMessageGoingOut, count, pDataToStore, aNwkAddress)  Descriptor_Store_rsp(gActive_EP_store_req_c, pMessageGoingOut,count, pDataToStore, aNwkAddress)
#else
#define Active_EP_store_rsp(pMessageGoingOut, count, pDataToStore, aNwkAddress)  gZero_c
#endif

#if gSimple_Desc_store_rsp_d
/*-------------------- Simple_Desc_store_rsp --------------------
	2.4.4.1.17 Simple_Desc_store_rsp. (ClusterID=0x801a)

	The Simple_Desc_store_rsp is provided to notify a Local Device of the request
	status from a Primary Discovery Cache device. Included in the response is a status
	code to notify the Local Device whether the request is successful (the Primary
	Cache Device has space to store the discovery cache data for the Local Device),
	whether the request is not supported (meaning the Remote Device is not a Primary
	Discovery Cache device) or whether insufficient space exists.

	IN/OUT: The buffer where the response data will be filled in.
	IN: The size in bytes of the descriptor to store.
	IN: The descriptor to store.
	IN: The short address of the requesting device.

	OUT: The size in bytes of the response payload.
*/
#define Simple_Desc_store_rsp(pMessageGoingOut, count, pDataToStore, aNwkAddress)  Descriptor_Store_rsp(gSimple_Desc_store_req_c, pMessageGoingOut,count, pDataToStore, aNwkAddress)
#else
#define Simple_Desc_store_rsp(pMessageGoingOut, count, pDataToStore, aNwkAddress)  gZero_c
#endif

#if gRemove_node_cache_rsp_d
/*-------------------- Remove_node_cache_rsp --------------------
	2.4.4.1.18 Remove_node_cache_rsp. (ClusterID=0x801b)

	The Remove_node_cache_rsp is provided to notify a Local Device of the request
	status from a Primary Discovery Cache device. Included in the response is a status
	code to notify the Local Device whether the request is successful (the Primary
	Cache Device has removed the discovery cache data for the indicated device of
	interest) or whether the request is not supported (meaning the Remote Device is
	not a Primary Discovery Cache device).

	IN/OUT: The buffer where the response data will be filled in.
	IN: The package with the request coming in.

	OUT: The size in bytes of the response payload.
*/
zbSize_t Remove_node_cache_rsp
(
	zbRemoveNodeCacheRequest_t  *pMessageComingIn,  /* IN/OUT: The buffer where the response will be generated. */
	zbRemoveNodeCacheResponse_t  *pMessageGoingOut  /* IN: The package with the request coming in. */
);
#else
#define Remove_node_cache_rsp(pMessageComingIn, pMessageGoingOut)  gZero_c
#endif

#if gFind_node_cache_rsp_d
/*-------------------- Find_node_cache_rsp --------------------
	2.4.4.1.19 Find_node_cache_rsp. (ClusterID=0x801c)

	The Find_node_cache_rsp is provided to notify a Local Device of the successful
	discovery of the Primary Discovery Cache device for the given NWKAddr and
	IEEEAddr fields supplied in the request, or to signify that the device of interest is
	capable of responding to discovery requests. The Find_node_cache_ rsp shall be
	generated only by Primary Discovery Cache devices holding discovery
	information for the NWKAddr and IEEEAddr in the request or the device of
	interest itself and all other Remote Devices shall not supply a response.

	IN/OUT: The buffer where the response data will be filled in.
	IN: The NWK Address for the device of interest.
	IN: The IEEE address for the device of interest.

	OUT: The size in bytes of the response payload.
*/
zbSize_t Find_node_cache_rsp
(
	zbFindNodeCacheResponse_t  *pMessageGoingOut,  /* IN/OUT: The buffer where the response data will be filled in. */
	zbNwkAddr_t  aNwkAddress,                      /* IN: The NWK Address for the device of interest. */
	zbIeeeAddr_t  aIeeeAddress                     /* IN: The IEEE address for the device of interest. */
);
#else
#define Find_node_cache_rsp(pMessageGoingOut, aNwkAddress, aIeeeAddress)  gZero_c
#endif

/*==============================================================================================
  =========== 2.4.4.2 End Device Bind, Bind, Unbind Bind Management Server Services ============
  ==============================================================================================*/
#if gEnd_Device_Bind_rsp_d && (gCoordinatorCapability_d || gComboDeviceCapability_d)&& gBindCapability_d
/*-------------------- End_Device_Bind_rsp --------------------
  2.4.4.2.1 End_Device_Bind_rsp. (ClusterID=0x8020)

  The End_Device_Bind_rsp is generated by the ZigBee Coordinator in response to
  an End_Device_Bind_req and contains the status of the request. This command
  shall be unicast to each device involved in the bind attempt, using the
  acknowledged data service.

  IN: The package with the in-coming request.

  OUT: Zero to avoid sending the response immediately.
*/
zbSize_t End_Device_Bind_rsp(zbEndDeviceBindRequest_t *pMessageComingIn, zbStatus_t *pStatus);
#else
#define End_Device_Bind_rsp(pMessageComingIn, pStatus)  gZero_c
#endif

#if gBind_rsp_d && gBindCapability_d
/*-------------------- Bind_rsp --------------------
	2.4.4.2.2 Bind_rsp. (ClusterID=0x8021)

	The Bind_rsp is generated in response to a Bind_req. If the Bind_req is processed
	and the Binding Table entry committed on the Remote Device, a Status of
	SUCCESS is returned. If the Remote Device is not the a Primary binding table
	cache or the SrcAddress, a Status of NOT_SUPPORTED is returned. The
	supplied endpoint shall be checked to determine whether it falls within the
	specified range. If it does not, a Status of INVALID_EP shall be returned.11 If the
	Remote Device is the Primary binding table cache or SrcAddress but does not
	have Binding Table resources for the request, a Status of TABLE_FULL is
	returned.

	IN/OUT: The buffer where the response data will be filled in (status only).
	IN: The package with the request information.
	IN: The short address of the requesting device.

	OUT: The size in bytes of the response payload.
*/
#define Bind_rsp(pMessageComingIn, pMessageGoingOut, aSrcAddr)  Bind_Unbind_rsp(gBind_req_c,pMessageComingIn, pMessageGoingOut, aSrcAddr)
#else
#define Bind_rsp(pMessageComingIn, pMessageGoingOut, aSrcAddr)  gZero_c
#endif

#if gUnbind_rsp_d && gBindCapability_d
/*-------------------- Unbind_rsp --------------------
	2.4.4.2.3 Unbind_rsp. (ClusterID=0x8022)

	The Unbind_rsp is generated in response to an Unbind_req. If the Unbind_req is
	processed and the corresponding Binding Table entry is removed from the Remote
	Device, a Status of SUCCESS is returned. If the Remote Device is not the ZigBee
	Coordinator or the SrcAddress, a Status of NOT_SUPPORTED is returned. The
	supplied endpoint shall be checked to determine whether it falls within the
	specified range. If it does not, a Status of INVALID_EP shall be returned.12 If the
	Remote Device is the ZigBee Coordinator or SrcAddress but does not have a
	Binding Table entry corresponding to the parameters received in the request, a
	Status of NO_ENTRY is returned.

	IN/OUT: The buffer where the response data will be filled in (status only).
	IN: The package with the request information.
	IN: The short address of the requesting device.

	OUT: The size in bytes of the response payload.
*/
#define Unbind_rsp(pMessageComingIn, pMessageGoingOut, aSrcAddr)  Bind_Unbind_rsp(gUnbind_req_c, pMessageComingIn, pMessageGoingOut, aSrcAddr)
#else
#define Unbind_rsp(pMessageComingIn, pMessageGoingOut, aSrcAddr)  gZero_c
#endif

#if gBind_Register_rsp_d
/*-------------------- Bind_Register_rsp --------------------
	2.4.4.2.4 Bind_Register_rsp. (ClusterID=0x8023)

	The Bind_Register_rsp is generated from a primary binding table cache device in
	response to a Bind_Register_req and contains the status of the request. This
	command shall be unicast to the requesting device.

	If the device receiving the Bind_Register_req is not a primary binding table cache
	a Status of NOT_SUPPORTED is returned. If its list of devices which choose to
	store their own binding table entries is full a status of TABLE_FULL is returned.
	In these error cases, BindingTableEntries and BindingTableListCount shall be
	zero and BindingTableList shall be empty. A Status of SUCCESS indicates that
	the requesting device has been successfully registered.

	IN/OUT: The buffer where the response data will be filled in.
	IN: The IEEE address of the node to be searched in the binding cache table.
	IN: The short address of the node soliciting the binding info.

	OUT: The size in bytes of the response payload.
*/
zbSize_t Bind_Register_rsp
(
	zbBindRegisterResponse_t  *pMessageGoingOut,  /* IN/OUT: The buffer where the response data will be filled in. */
	zbIeeeAddr_t  aIeeeAddr,                      /* IN: The IEEE address of the node to be searched in the binding cache table. */
	zbNwkAddr_t  aNwkAddress                      /* IN: The short address of the node soliciting the binding info. */
);
#else
#define Bind_Register_rsp(pMessageGoingOut, aIeeeAddr, aNwkAddress)  gZero_c
#endif

#if gReplace_Device_rsp_d
/*-------------------- Replace_Device_rsp --------------------
	2.4.4.2.5 Replace_Device_rsp. (ClusterID=0x8024)

	The Replace_Device_rsp is generated from a primary binding table cache device
	in response to a Replace_Device_req and contains the status of the request. This
	command shall be unicast to the requesting device. If the device receiving the
	Replace_Device_req is not a primary binding table cache a Status of
	NOT_SUPPORTED is returned. The primary binding table cache shall search its
	binding table for entries whose source address and source endpoint, or whose
	destination address and destination endpoint match OldAddress and OldEndpoint,
	as described in the text for Replace_Device_req. It shall change these entries to
	have NewAddress and possibly NewEndpoint. It shall then return a response of
	SUCCESS.

	IN/OUT: The buffer where the response will be generated.
	IN: The package with the request information.
	IN: The address of the device sending the request.

	OUT: The size in bytes of the response payload.
*/
zbSize_t Replace_Device_rsp
(
	zbReplaceDeviceResponse_t  *pMessageGoingOut,  /* IN/OUT: The buffer where the response will be generated. */
	zbReplaceDeviceRequest_t  *pMsgIn,             /* IN: The package with the request information. */
	zbNwkAddr_t  aSrcAddr                          /* IN: The address of the device sending the request. */
);
#else
#define Replace_Device_rsp(pMessageGoingOut,pMsgIn, aSrcAddr)  gZero_c
#endif

#if gStore_Bkup_Bind_Entry_rsp_d
/*-------------------- Store_Bkup_Bind_Entry_rsp --------------------
	2.4.4.2.6 Store_Bkup_Bind_Entry_rsp. (ClusterID=0x8025)

	The Store_Bkup_Bind_Entry_rsp is generated from a backup binding table cache
	device in response to a Store_Bkup_Bind_Entry_req from a primary binding table
	cache and contains the status of the request. This command shall be unicast to the
	requesting device.

	IN/OUT: The buffer where the response will be generated.
	IN: The package with the request information.
	IN: The address of the device sending the request.

	OUT: The size in bytes of the response payload.
*/
zbSize_t Store_Bkup_Bind_Entry_rsp
(
	zbStoreBkupBindEntryResponse_t  *pMessageGoingOut,  /* IN/OUT: The buffer where the response will be generated. */
	zbStoreBkupBindEntryRequest_t  *pMessageComingIn,   /* IN: The package with the request information. */
	zbNwkAddr_t  aNwkAddress                            /* IN: The address of the device sending the request. */
);
#else
#define Store_Bkup_Bind_Entry_rsp(pMessageGoingOut, pMessageComingIn, aNwkAddress)  gZero_c
#endif

#if gRemove_Bkup_Bind_Entry_rsp_d
/*-------------------- Remove_Bkup_Bind_Entry_rsp --------------------
	2.4.4.2.7 Remove_Bkup_Bind_Entry_rsp. (ClusterID=0x8026)

	The Remove_Bkup_Bind_Entry_rsp is generated from a backup binding table
	cache device in response to a Remove_Bkup_Bind_Entry_req from the primary
	binding table cache and contains the status of the request. This command shall be
	unicast to the requesting device.

	IN/OUT: The buffer where the response will be generated.
	IN: The package with the request information.
	IN: The address of the device sending the request.

	OUT: The size in bytes of the response payload.
*/
zbSize_t Remove_Bkup_Bind_Entry_rsp
(
	zbRemoveBackupBindEntryResponse_t  *pMessageGoingOut,  /* IN/OUT: The buffer where the response will be generated. */
	zbRemoveBackupBindEntryRequest_t	*pMessageComingIn,	 /* IN: The package with the request information. */
	zbNwkAddr_t  aNwkAddress															 /* IN: The address of the device sending the request. */
);
#else
#define Remove_Bkup_Bind_Entry_rsp(pMessageGoingOut, pMessageComingIn, aNwkAddress)  gZero_c
#endif

#if gBackup_Bind_Table_rsp_d
/*-------------------- Backup_Bind_Table_rsp --------------------
	2.4.4.2.8 Backup_Bind_Table_rsp. (ClusterID=0x8027)

	The Backup_Bind_Table_rsp is generated from a backup binding table cache
	device in response to a Backup_Bind_Table_req from a primary binding table
	cache and contains the status of the request. This command shall be unicast to the
	requesting device.

	IN: The package with the request information.
	IN/OUT: The buffer where the response will be generated.
	IN: The address of the device sending the request.

	OUT: The size in bytes of the response payload.
*/
zbSize_t Backup_Bind_Table_rsp
(
	zbBackupBindTableRequest_t	*pMessageComingIn,	 /* IN: The package with the request information. */
	zbBackupBindTableResponse_t  *pMessageGoingOut,  /* IN/OUT: The buffer where the response will be generated. */
	zbNwkAddr_t  aNwkAddress												 /* IN: The address of the device sending the request. */
);
#else
#define Backup_Bind_Table_rsp(pMessageComingIn, pMessageGoingOut, aNwkAddress)  gZero_c
#endif

#if gRecover_Bind_Table_rsp_d
/*-------------------- Recover_Bind_Table_rsp --------------------
	2.4.4.2.9 Recover_Bind_Table_rsp. (ClusterID=0x8028)

	The Recover_Bind_Table_rsp is generated from a backup binding table cache
	device in response to a Recover_Bind_Table_req from a primary binding table
	cache and contains the status of the request. This command shall be unicast to the
	requesting device.

	IN: The package with the request information.
	IN/OUT: The buffer where the response will be generated.
	IN: The address of the device sending the request.

	OUT: The size in bytes of the response payload.
*/
zbSize_t Recover_Bind_Table_rsp
(
	zbRecoverBindTableRequest_t *pMessageComingIn,   /* IN: The package with the request information. */
	zbRecoverBindTableResponse_t *pMessageGoingOut,  /* IN/OUT: The buffer where the response will be build. */
	zbNwkAddr_t  aNwkAddress                         /* IN: The short address of the node soliciting the binding info. */
);
#else
#define Recover_Bind_Table_rsp(pMessageComingIn, pMessageGoingOut, aNwkAddress)  gZero_c
#endif

#if gBackup_Source_Bind_rsp_d
/*-------------------- Backup_Source_Bind_rsp --------------------
	2.4.4.2.10 Backup_Source_Bind_rsp. (ClusterID=0x8029)

	The Backup_Source_Bind_rsp is generated from a backup binding table cache
	device in response to a Backup_Source_Bind_req from a primary binding table
	cache and contains the status of the request. This command shall be unicast to the
	requesting device.

	IN: The package with the request information.
	IN/OUT: The buffer where the response will be generated.
	IN: The address of the device sending the request.

	OUT: The size in bytes of the response payload.
*/
zbSize_t Backup_Source_Bind_rsp
(
	zbBackupSourceBindRequest_t  *pMessageComingIn,   /* IN: The package with the request information. */
	zbBackupSourceBindResponse_t  *pMessageGoingOut,  /* IN/OUT: The buffer where the response will be build. */
	zbNwkAddr_t  aNwkAddress                          /* IN: The short address of the node soliciting the binding info. */
);
#else
#define Backup_Source_Bind_rsp(pMessageComingIn, pMessageGoingOut, aNwkAddress)  gZero_c
#endif

#if gRecover_Source_Bind_rsp_d
/*-------------------- Recover_Source_Bind_rsp --------------------
	2.4.4.2.11 Recover_Source_Bind_rsp. (ClusterID=0x802a)

	The Recover_Source_Bind_rsp is generated from a backup binding table cache
	device in response to a Recover_Source_Bind_req from a primary binding table
	cache and contains the status of the request. This command shall be unicast to the
	requesting device.

	IN: The package with the request information.
	IN/OUT: The buffer where the response will be generated.
	IN: The address of the device sending the request.

	OUT: The size in bytes of the response payload.
*/
zbSize_t Recover_Source_Bind_rsp
(
	zbRecoverSourceBindRequest_t  *pMessageComingIn,   /* IN: The package with the request information. */
	zbRecoverSourceBindResponse_t  *pMessageGoingOut,  /* IN/OUT: The buffer where the response will be build. */
	zbNwkAddr_t  aNwkAddress                           /* IN: The address of the device sending the request. */
);
#else
#define Recover_Source_Bind_rsp(pMessageComingIn, pMessageGoingOut, aNwkAddress)  gZero_c
#endif

/*==============================================================================================
	========================= 2.4.4.3 Network Management Server Services =========================
	==============================================================================================*/
#if gMgmt_NWK_Disc_rsp_d
/*-------------------- Mgmt_NWK_Disc_rsp --------------------
	2.4.4.3.1 Mgmt_NWK_Disc_rsp. (ClusterID=0x8030)

	The Mgmt_NWK_Disc_rsp is generated in response to an
	Mgmt_NWK_Disc_req. If this management command is not supported, a status
	of NOT_SUPPORTED shall be returned and all parameter fields after the Status
	field shall be omitted. Otherwise, the Remote Device shall implement the
	following processing.

	IN: The package with the request information.
	IN/OUT: The buffer where the response will be build.

	OUT: NONE
*/
zbSize_t Mgmt_NWK_Disc_rsp
(
	zbMgmtNwkDiscoveryRequest_t *pMessageComingIn,  /* IN: The package with the request information. */
	zdoNlmeMessage_t  *pMessageGoingOut,             /* IN/OUT: The buffer where the response will be build. */
	zbNwkAddr_t  aNwkAddress                  /* IN: The address of the device sending the request. */
);
#else
#define Mgmt_NWK_Disc_rsp(pMessageComingIn, pMessageGoingOut)  gZero_c
#endif

#if gMgmt_Lqi_rsp_d && ( gCoordinatorCapability_d || gRouterCapability_d || gComboDeviceCapability_d)
/*-------------------- Mgmt_Lqi_rsp --------------------
	2.4.4.3.2 Mgmt_Lqi_rsp. (ClusterID=0x8031)

	The Mgmt_Lqi_rsp is generated in response to an Mgmt_Lqi_req. If this
	management command is not supported, a status of NOT_SUPPORTED shall be
	returned and all parameter fields after the Status field shall be omitted.

	IN: The package with the request information.
	IN/OUT: The buffer where the response will be generated.

	OUT: The size in bytes of the response payload.
*/
zbSize_t Mgmt_Lqi_rsp
(
	zbMgmtLqiRequest_t  *pMessageComingIn,  /* IN: The package with the request information. */
	zbMgmtLqiResponse_t  *pMessageGoingOut  /* IN/OUT: The buffer where the response will be generated. */
);
#else
#define Mgmt_Lqi_rsp(pMessageComingIn,pMessageGoingOut)  gZero_c
#endif

#if gRnplusCapability_d && (gCoordinatorCapability_d || gRouterCapability_d || gComboDeviceCapability_d)
#if gMgmt_Rtg_rsp_d
/*-------------------- Mgmt_Rtg_rsp --------------------
	2.4.4.3.3 Mgmt_Rtg_rsp. (ClusterID=0x8032)

	The Mgmt_Rtg_rsp is generated in response to an Mgmt_Rtg_req. If this
	management command is not supported, a status of NOT_SUPPORTED shall be
	returned and all parameter fields after the Status field shall be omitted.

	IN: The package with the request information.
	IN/OUT: The buffer where the response will be generated.

	OUT: The size in bytes of the response payload.
*/
zbSize_t Mgmt_Rtg_rsp
(
	zbMgmtRtgRequest_t  *pMessageComingIn,  /* IN: The package with the request information. */
	zbMgmtRtgResponse_t  *pMessageGoingOut  /* IN/OUT: The buffer where the response will be generated. */
);
#else
#define Mgmt_Rtg_rsp(pMessageComingIn, pMessageGoingOut)  gZero_c
#endif
#endif

#if gMgmt_Bind_rsp_d
/*-------------------- Mgmt_Bind_rsp --------------------
	2.4.4.3.4 Mgmt_Bind_rsp. (ClusterID=0x8033)

	The Mgmt_Bind_rsp is generated in response to a Mgmt_Bind_req. If this
	management command is not supported, a status of NOT_SUPPORTED shall be
	returned and all parameter fields after the Status field shall be omitted.

	IN: The package with the request information.
	IN/OUT: The buffer where the response will be generated.

	OUT: The size in bytes of the response payload.
*/
zbSize_t Mgmt_Bind_rsp
(
	zbMgmtBindRequest_t  *pMessageComingIn,  /* IN: The package with the request information. */
	zbMgmtBindResponse_t  *pMessageGoingOut  /* IN/OUT: The buffer where the response will be generated. */
);
#else
#define Mgmt_Bind_rsp(pMessageComingIn, pMessageGoingOut)  gZero_c
#endif

#if gMgmt_Leave_rsp_d
/*-------------------- Mgmt_Leave_rsp --------------------
	2.4.4.3.5 Mgmt_Leave_rsp. (ClusterID=0x8034)

	The Mgmt_Leave_rsp is generated in response to a Mgmt_Leave_req. If this
	management command is not supported, a status of NOT_SUPPORTED shall be
	returned.

	IN: The package with the request information.
	IN/OUT: The buffer where the response will be generated.
	IN: The address of the device sending the request.

	OUT: The size in bytes of the response payload.
*/
zbSize_t Mgmt_Leave_rsp
(
	zbMgmtLeaveRequest_t  *pMessageComingIn,  /* IN: The package with the request information. */
	zbMgmtLeaveResponse_t  *pMessageGoingOut, /* IN/OUT: The buffer where the response will be generated. */
	zbNwkAddr_t  aNwkAddress                  /* IN: The address of the device sending the request. */
);
#else
#define Mgmt_Leave_rsp(pMessageComingIn, pMessageGoingOut, aNwkAddress)  gZero_c
#endif

#if gMgmt_Direct_Join_rsp_d && (gCoordinatorCapability_d || gRouterCapability_d || gComboDeviceCapability_d)
/*--------------------  --------------------
	2.4.4.3.6 Mgmt_Direct_Join_rsp. (ClusterID=0x8035)

	The Mgmt_Direct_Join_rsp is generated in response to a Mgmt_Direct_Join_req.
	If this management command is not supported, a status of NOT_SUPPORTED
	shall be returned.

	IN: The package with the request information.
	IN/OUT: The buffer where the response will be generated.
	IN: The address of the device sending the request.

	OUT: The size in bytes of the response payload.
*/
zbSize_t Mgmt_Direct_Join_rsp
(
  zbMgmtDirectJoinRequest_t *pMsgComingIn,
  zbNwkAddr_t  aSrcAddr
);
#else
#define Mgmt_Direct_Join_rsp(pMsgComingIn, aSrcAddr) 0
#endif

#if gCoordinatorCapability_d || gRouterCapability_d || gComboDeviceCapability_d
#if gMgmt_Permit_Joining_rsp_d
/*-------------------- Mgmt_Permit_Joining_rsp --------------------
	2.4.4.3.7 Mgmt_Permit_Joining_rsp. (ClusterID=0x8036)

	The Mgmt_Permit_Joining_rsp is generated in response to a unicast
	Mgmt_Permit_Joining_req. In the description which follows, note that no
	response shall be sent if the Mgmt_Permit_Joining_req was received as a
	broadcast to all routers.

	IN: The package with the request information.
	IN/OUT: The buffer where the response will be generated.

	OUT: The size in bytes of the response payload.
*/
zbSize_t Mgmt_Permit_Joining_rsp
(
	zbMgmtPermitJoiningRequest_t  *pMessageComingIn,  /* IN: The package with the request information. */
	zbMgmtPermitJoiningResponse_t  *pMessageGoingOut,  /* IN/OUT: The buffer where the response will be generated. */
  zbNwkAddr_t  aNwkAddress	                        /* IN: The address of the device sending the request. */	
);
#else
#define Mgmt_Permit_Joining_rsp(pMessageComingIn, pMessageGoingOut, aSrcAddr)  sizeof(zbStatus_t);
#endif
#endif

#if gMgmt_Cache_rsp_d
/*-------------------- Mgmt_Cache_rsp --------------------
	2.4.4.3.8 Mgmt_Cache_rsp. (ClusterID=0x8037)

	The Mgmt_Cache_rsp is generated in response to an Mgmt_Cache_req. If this
	management command is not Supported or the Remote Device is not a Primary
	Cache Device, a status of NOT_SUPPORTED shall be returned and all parameter
	fields after the Status field shall be omitted.

	IN: The package with the request information.
	IN: The starting Index for the requested elements of the discovery cache list.

	OUT: The size in bytes of the response payload.
*/
zbSize_t Mgmt_Cache_rsp
(
	zbMgmtCacheResponse_t  *pMessageGoingOut,  /* IN: The package with the request information. */
	zbIndex_t  startIndex                        /* IN: The starting Index for the requested elements of the discovery cache list. */
);
#else
#define Mgmt_Cache_rsp(pMessageGoingOut, startIndex)  gZero_c
#endif

/*-------------------- Device_Annce --------------------
    2.4.3.1.11.1 Device_annce (ClusterID=0x0013)
    The Device_annce is provided to enable ZigBee devices on the network to notify
    other ZigBee devices that the device has joined or re-joined the network,
    identifying the device.s 64-bit IEEE address and new 16-bit NWK address, and
    informing the Remote Devices of the capability of the ZigBee device
*/
zbSize_t Device_Annce
(
  zbEndDeviceAnnounce_t *pMsg,
  zbNwkAddr_t           aSrcAddress
);

#if (gStochasticAddressingCapability_d) 
/* This function contains the mechanism to detect an address conflict*/
extern bool_t NwkAddressConflictDetected(zbNwkAddr_t pNwkAddr, zbIeeeAddr_t paExtAddr, bool_t pBroadcastMsgType);

/* This function takes the corresponding actions to resolve an  address conflict  */
extern void AddressConflictResolution( void );
#endif

